Application integrating MVC with Angular.

Angular will handle client-side interactions providing a rich, dynamic user experience without the need for page reloads
that a traditional ASP.NET MVC application would require.


Initial Loading

Application Start:
When you start your MVC application using dotnet run, it fires up the Kestrel server (or IISExpress if configured that way) which serves your application.
The MVC routes are initialized, and the server begins listening for incoming HTTP requests.


Serving the Initial Page:
The first request to your application (typically for the root URL) is handled by an MVC controller. This controller typically returns a view that includes the Angular application's root component (<app-root></app-root>), effectively bootstrapping the Angular application.
The initial HTML page served (often Index.cshtml in an MVC app) includes references to the JavaScript files generated by Angular during the build process (like main.js, polyfills.js, runtime.js, etc.), which are placed inside the wwwroot directory or linked directly from your Angular build output directory, depending on your configuration.


Angular Takes Over
Angular Bootstrapping:
Once the initial HTML is loaded in the user's browser, Angular initializes based on the scripts loaded from the Angular build. Angular takes over the client-side rendering by interpreting the <app-root></app-root> tag and rendering the appropriate Angular components inside this tag.
Angular's router starts handling navigation within the application. Any client-side routes defined in Angular handle navigation without further server-side requests, making the application feel faster and more responsive.


Angular Universal Configuration

Angular Universal is a technology that allows you to run your Angular application on the server, rendering pages to HTML on the server before sending them to the client. This can improve performance and SEO by serving pre-rendered pages to search engine crawlers and users with JavaScript disabled.


Build Browser App: ng build -c production
Build Server App: ng run ClientApp:server:production




Add Database Migrations:
dotnet ef migrations add InitialCreate -p ../BookStore.Data/BookStore.Data.csproj -s BooStore.csproj

Update database:
dotnet ef database update

